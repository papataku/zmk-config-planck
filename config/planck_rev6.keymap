/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
 
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>


#define BT(n) BT_SEL n

#define JISKEY 0
#define USKEY 1
#define LOWER 2
#define RAISE 3
#define USRAI 4
#define FUNC1 5
#define FUNC2 6
#define ADJUS 7



#define __________	&trans
#define XXXXXXXXXX	&none

/* for JIS */
#define LO_MUHE		&lt LOWER INT_MUHENKAN
#define RA_HENK		&lt RAISE INT_HENKAN
/* for US */
#define LO_US		&lt LOWER LANG2
#define RA_US		&lt USRAI LANG1

#define ESC_ADJ 	&lt ADJUS ESC
//#define ASCRN		&kp LA(PSCRN)
#define ASCRN       &ASCRN_
#define TEAM_EDIT	&kp LS(LG(X))


#define J_KEY_MACRO(name,key)        ZMK_MACRO(name,    \
            wait-ms = <50>;                             \
            bindings =  <&macro_press &kp LSHFT>,       \
                        <&macro_press &kp key>,         \
                        <&macro_pause_for_release>,     \
                        <&macro_release &kp key>,       \
                        <&macro_release &kp LSHFT>;     \
        )

#define CTRL_KEY_MACRO(name,key)        ZMK_MACRO(name, \
            wait-ms = <50>;                             \
            bindings =  <&macro_press &kp LCTRL>,       \
                        <&macro_press &kp key>,         \
                        <&macro_pause_for_release>,     \
                        <&macro_release &kp key>,       \
                        <&macro_release &kp LCTRL>;     \
        )

#define ALT_KEY_MACRO(name,key)        ZMK_MACRO(name,  \
            wait-ms = <50>;                             \
            bindings =  <&macro_press &kp LALT>,        \
                        <&macro_press &kp key>,         \
                        <&macro_pause_for_release>,     \
                        <&macro_release &kp key>,       \
                        <&macro_release &kp LALT>;      \
        )

#define J_YEN		&kp INT_YEN		// ¥

//#define J_EXCL		&kp LS(N1)		// !

#define J_EXCL		&J_EXCL_		// !
//#define J_AT		&kp LBKT		// @
#define J_AT		&J_AT_   		// @
//#define J_HASH		&kp LS(N3)		// #
//#define J_DLLR		&kp LS(N4)		// $
//#define J_PRCN		&kp LS(N5)		// %
#define J_HASH		&J_HASH_		// #
#define J_DLLR		&J_DLLR_		// $
#define J_PRCN		&J_PRCN_		// %
#define J_CARE		&kp EQUAL		// ^
//#define J_AMPS		&kp LS(N6)		// &
//#define J_ASTR		&kp LS(SQT)		// *
//#define J_LPAR		&kp LS(N8)		// (
//#define J_RPAR		&kp LS(N9)		// )
#define J_AMPS		&J_AMPS_		// &
#define J_ASTR		&J_ASTR_		// *
#define J_LPAR		&J_LPAR_		// (
#define J_RPAR		&J_RPAR_		// )

//#define J_EQL		&kp LS(MINUS)	// =
//#define J_LBRC		&kp LS(RBKT)	// {
//#define J_RBRC		&kp LS(NUHS)	// }
//#define J_SQT		&kp LS(N7)		// '
#define J_EQL		&J_EQL_	// =
#define J_LBRC		&J_LBRC_	// {
#define J_RBRC		&J_RBRC_	// }
#define J_SQT		&J_SQT_		// '
#define J_BSLH		&kp INT1		// (backslash)
//#define J_PIPE		&kp LS(INT3)	// |
//#define J_PLUS		&kp LS(SEMI)	// +
//#define J_UNDE		&kp LS(INT1)	// _
#define J_PIPE		&J_PIPE_	// |
#define J_PLUS		&J_PLUS_	// +
#define J_UNDE		&J_UNDE_	// _
#define J_LBKT		&kp RBKT		// [
#define J_RBKT		&kp NUHS		// ]
//#define J_DQT		&kp LS(N2)		// "
#define J_DQT		&J_DQT_		// "

#define J_COLN		&kp SQT			// :

#define J_GRAV      &J_GRA_     // `
#define J_TILD      &J_TIL_     // ~

// RGB setting
#define D_RGB_ON    &rgb_ug RGB_ON
#define D_RGB_HUI   &rgb_ug RGB_HUI
#define D_RGB_SAI   &rgb_ug RGB_SAI
#define D_RGB_BRI   &rgb_ug RGB_BRI
#define D_RGB_SPI   &rgb_ug RGB_SPI
#define D_RGB_EFF   &rgb_ug RGB_EFF
#define D_RGB_OFF   &rgb_ug RGB_OFF
#define D_RGB_HUD   &rgb_ug RGB_HUD
#define D_RGB_SAD   &rgb_ug RGB_SAD
#define D_RGB_BRD   &rgb_ug RGB_BRD
#define D_RGB_SPD   &rgb_ug RGB_SPD
#define D_RGB_EFR   &rgb_ug RGB_EFR


&lt {  // layer-tap config
    flavor = "hold-preferred";
    tapping-term-ms = <100>;
    retro-tap;
};

/ {
    behaviors {

        scoln: mod_morph_scoln {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_MORPH_SCOLN";
            #binding-cells = <0>;
            bindings = <&kp SEMI>, <J_COLN>; // [sft ;] ─› [JP :]
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
    
    macros {
        J_KEY_MACRO(J_EXCL_, N1)
        J_KEY_MACRO(J_HASH_, N3)
        J_KEY_MACRO(J_DLLR_, N4)
        J_KEY_MACRO(J_PRCN_, N5)
        J_KEY_MACRO(J_AMPS_, N6)
        J_KEY_MACRO(J_ASTR_, SQT)
        J_KEY_MACRO(J_LPAR_, N8)
        J_KEY_MACRO(J_RPAR_, N9)
        J_KEY_MACRO(J_EQL_, MINUS)
        J_KEY_MACRO(J_LBRC_, RBKT)
        J_KEY_MACRO(J_RBRC_, NUHS)
        J_KEY_MACRO(J_SQT_, N7)
        J_KEY_MACRO(J_PIPE_, INT3)
        J_KEY_MACRO(J_PLUS_, SEMI)
        J_KEY_MACRO(J_UNDE_, INT1)
        J_KEY_MACRO(J_DQT_, N2)
        J_KEY_MACRO(J_GRA_, LBRC)
        J_KEY_MACRO(J_TIL_, EQUAL)

        ZMK_MACRO(J_AT_,    \
            wait-ms = <50>;                             \
            bindings =  <&macro_tap &kp INT_MUHENKAN>,  \
                        <&macro_press &kp LBKT>,        \
                        <&macro_pause_for_release>,     \
                        <&macro_release &kp LBKT>;       \
        )

        CTRL_KEY_MACRO(CTRL_T, T)

        ALT_KEY_MACRO(ASCRN_, PSCRN)

        q_key: q_list_key {
            label = "q_list_key";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp N1>,
                <&kp Q>,
                <&kp A>,
                <&kp Z>;
        };
        w_key: w_list_key {
            label = "w_list_key";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp N2>,
                <&kp W>,
                <&kp S>,
                <&kp X>;
        };
        e_key: e_list_key {
            label = "e_list_key";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp N3>,
                <&kp E>,
                <&kp D>,
                <&kp C>;
        };
        r_key: r_list_key {
            label = "r_list_key";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp N4>,
                <&macro_tap>,
                <&kp R>,
                <&macro_tap>,
                <&kp F>,
                <&macro_tap>,
                <&kp V>;
        };
        hex_key: hex_key {
            label = "hex_key";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp N0>,
                <&macro_tap>,
                <&kp X>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // | TAB   |  Q   |  W   |  E   |  R   |  T   |   Y   |  U    |  I   |  O   |   P   | BSPC  |
            // | ESC/AD|  A   |  S   |  D   |  F   |  G   |   H   |  J    |  K   |  L   |   ;   | ENTER |
            // | SHIFT |  Z   |  X   |  C   |  V   |  B   |   N   |  M    |  ,   |  .   |  UP   | /     |
            // | LCTL  | LGUI | LALT | FUNC2| LOWR |     SPACE    |  RAIS | FUNC1| LEFT | DOWN  | RIGHT |

            bindings = <
                &kp TAB    &kp Q      &kp W     &kp E     &kp R    &kp T      &kp Y      &kp U    &kp I      &kp O    &kp P     &kp BSPC
                ESC_ADJ    &kp A      &kp S     &kp D     &kp F    &kp G      &kp H      &kp J    &kp K      &kp L    &scoln    &kp RET
                &kp LSHFT  &kp Z      &kp X     &kp C     &kp V    &kp B      &kp N      &kp M    &kp COMMA  &kp DOT  &kp UP    &kp FSLH
                &kp LCTRL  &kp LGUI   &kp LALT  &mo FUNC2 LO_MUHE  &kp SPACE  &kp SPACE  RA_HENK  &mo FUNC1  &kp LEFT &kp DOWN  &kp RIGHT
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        us_key {
            // -----------------------------------------------------------------------------------------
            // | TAB   |  Q   |  W   |  E   |  R   |  T   |   Y   |  U    |  I   |  O   |   P   | BSPC  |
            // | ESC/AD|  A   |  S   |  D   |  F   |  G   |   H   |  J    |  K   |  L   |   ;   | ENTER |
            // | SHIFT |  Z   |  X   |  C   |  V   |  B   |   N   |  M    |  ,   |  .   |  UP   | /     |
            // | LCTL  | LGUI | LALT | FUNC2| LOWR |     SPACE    |  RAIS | FUNC1| LEFT | DOWN  | RIGHT |

            bindings = <
                &kp TAB    &kp Q      &kp W     &kp E     &kp R    &kp T      &kp Y      &kp U    &kp I      &kp O    &kp P     &kp BSPC
                ESC_ADJ    &kp A      &kp S     &kp D     &kp F    &kp G      &kp H      &kp J    &kp K      &kp L    &kp SEMI  &kp RET
                &kp LSHFT  &kp Z      &kp X     &kp C     &kp V    &kp B      &kp N      &kp M    &kp COMMA  &kp DOT  &kp UP    &kp FSLH
                &kp LCTRL  &kp LGUI   &kp LALT  &mo FUNC2 LO_US    &kp SPACE  &kp SPACE  RA_US    &mo FUNC1  &kp LEFT &kp DOWN  &kp RIGHT
            >;
        };

        lower {
            bindings = <
				&trans     &trans     &trans     &trans     &trans     &trans     &trans     &kp N7     &kp N8     &kp N9     &trans     &trans
				&trans     &trans     ASCRN      &trans     &CTRL_T    &trans     &trans     &kp N4     &kp N5     &kp N6     &trans     &trans
				&trans     &trans     &kp DEL    &kp BSPC   &kp RET    &trans     &trans     &kp N1     &kp N2     &kp N3     &trans     &trans
                &trans     &trans     &trans     &trans     XXXXXXXXXX &trans     &trans     &kp N0     &kp DOT    &kp COMMA  &hex_key
                   &trans
            >;
        };

        raise {
            bindings = <
				J_GRAV     J_EXCL     J_AT       J_HASH     J_DLLR     J_PRCN     J_CARE     J_AMPS     J_ASTR     J_LPAR     J_RPAR     J_BSLH
				J_TILD     &trans     &trans     &trans     &trans     &trans     J_EQL      &kp MINUS  J_LBRC     J_RBRC     J_SQT      J_PIPE
				&trans     &trans     &trans     &trans     &trans     &trans     J_PLUS     J_UNDE     J_LBKT     J_RBKT     J_DQT      &trans
                &trans     &trans     &trans     &trans     &trans     &trans     &trans     XXXXXXXXXX &kp K_APP  &trans     &trans     &trans
            >;
        };

        us_rai {
            bindings = <
				&kp GRAVE  &kp EXCL   &kp AT     &kp HASH   &kp DLLR   &kp PRCNT  &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR   &kp RPAR   &kp BSLH
				&kp TILDE  &trans     &trans     &trans     &trans     &trans     &kp EQL    &kp MINUS  &kp LBRC   &kp RBRC   &kp SQT    &kp PIPE
				&trans     &trans     &trans     &trans     &trans     &trans     &kp PLUS   &kp UNDER  &kp LBKT   &kp RBKT   &kp DQT    &trans
                &trans     &trans     &trans     &trans     &trans     &trans     &trans     XXXXXXXXXX &trans     &trans     &trans     &trans
            >;
        };

		func1 {
			// -------------------------------------------------------------------------------------------------------------------------------------
			// |          |          |          |          |          |          |          |          |          |          |          |          |
			bindings = <
				&trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &kp DEL
				D_RGB_ON   D_RGB_HUI  D_RGB_SAI  D_RGB_BRI  D_RGB_SPI  D_RGB_EFF  &trans     &trans     &kp PG_UP  &kp PG_DN  &trans     &trans
				D_RGB_OFF  D_RGB_HUD  D_RGB_SAD  D_RGB_BRD  D_RGB_SPD  D_RGB_EFR  &trans     &trans     &kp HOME   &kp END    &trans     &trans
                &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     XXXXXXXXXX &trans     &trans     &trans
			>;
		};

		func2 {
			// -------------------------------------------------------------------------------------------------------------------------------------
			// |          |          |          |          |          |          |          |          |          |          |          |          |
			bindings = <
				&trans     &kp F1     &kp F2     &kp F3     &kp F4     &kp F5     &trans     &trans     &trans     &trans     &trans     &trans
				&trans     &kp F6     &kp F7     &kp F8     &kp F9     &kp F10    &trans     &trans     &trans     &trans     &trans     &trans
				&trans     &kp F11    &kp F12    &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans
                &trans     &trans     &trans     XXXXXXXXXX &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans
			>;
		};

        adjust {
            bindings = <
            // -------------------------------------------------------------------------------------------------------------------------------------
			// |          |          |          |          |          |          |          |          |          |          |          |          |

                &trans     &q_key     &w_key     &e_key     &r_key     &trans     &trans     &to USKEY  &trans     &trans     &trans     &bootloader
                &trans     &bt BT(0)  &bt BT(1)  &bt BT(2)  &bt BT(3)  &bt BT(4)  &bt BT_CLR &to JISKEY &trans     &trans     &trans     &sys_reset
                &trans     &out OUT_USB &out OUT_BLE &trans    &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans
                &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans
            >;
        };
    };
};